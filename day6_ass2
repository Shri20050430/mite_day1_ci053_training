#include <stdio.h>
#include <string.h>

// Define the structure for an item
struct Item {
    char name[50];
    int quantity;
};

// Function to sort items by quantity in ascending order
void sortItemsByQuantity(struct Item items[], int n) {
    struct Item temp;
    for (int i = 0; i < n-1; i++) {
        for (int j = i+1; j < n; j++) {
            if (items[i].quantity > items[j].quantity) {
                temp = items[i];
                items[i] = items[j];
                items[j] = temp;
            }
        }
    }
}

// Function to perform binary search for an item by name
int binarySearch(struct Item items[], int n, char name[]) {
    int left = 0;
    int right = n - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        int cmp = strcmp(items[mid].name, name);
        if (cmp == 0) {
            return mid; // Item found
        } else if (cmp < 0) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1; // Item not found
}

// Function to display items running low on stock (< 5 units)
void displayLowStockItems(struct Item items[], int n) {
    printf("Low Stock Items:\n");
    for (int i = 0; i < n; i++) {
        if (items[i].quantity < 5) {
            printf("%s (%d)\n", items[i].name, items[i].quantity);
        }
    }
}

int main() {
    struct Item inventory[] = {
        {"Sugar", 50},
        {"Salt", 3},
        {"Oil", 10}
        // Add more items here if needed
    };
    int n = sizeof(inventory) / sizeof(inventory[0]);

    sortItemsByQuantity(inventory, n);

    printf("Inventory sorted by quantity:\n");
    for (int i = 0; i < n; i++) {
        printf("%s (%d)\n", inventory[i].name, inventory[i].quantity);
    }

    char search_name[50] = "Oil";
    printf("\nSearch '%s':\n", search_name);
    int index = binarySearch(inventory, n, search_name);
    if (index != -1) {
        printf("Found: %s (Quantity: %d)\n", inventory[index].name, inventory[index].quantity);
    } else {
        printf("Item '%s' not found.\n", search_name);
    }

    displayLowStockItems(inventory, n);

    return 0;
}
