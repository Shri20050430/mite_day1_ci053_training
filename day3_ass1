/*1. Flight Ticket Booking System`
`Scenario:`
A travel agency wants to `store the details of N passengers` (Name, Age, Destination).
The system should allow:
Adding a `new passenger`
`Sorting` passengers by `destination name (A-Z)`
Searching for passengers traveling to a specific destination
Use `arrays` and implement `sorting and searching techniques`.

`Input Example:`
```
Enter number of passengers: 3
Passenger 1: Alice, 30, Delhi
Passenger 2: Bob, 25, Mumbai
Passenger 3: Charlie, 40, Chennai

Sorted List (by destination):
Charlie
Chennai
Alice
Delhi
Bob
Mumbai
Enter destination to search: Mumbai
Passengers traveling to Mumbai: Bob */
#include <stdio.h>
#include <string.h>

#define MAX_PASSENGERS 100

typedef struct {
    char name[50];
    int age;
    char destination[50];
} Passenger;

void addPassenger(Passenger passengers[], int *count, char name[], int age, char destination[]) {
    strcpy(passengers[*count].name, name);
    passengers[*count].age = age;
    strcpy(passengers[*count].destination, destination);
    (*count)++;
}

void sortPassengersByDestination(Passenger passengers[], int count) {
    Passenger temp;
    for (int i = 0; i < count - 1; i++) {
        for (int j = i + 1; j < count; j++) {
            if (strcmp(passengers[i].destination, passengers[j].destination) > 0) {
                temp = passengers[i];
                passengers[i] = passengers[j];
                passengers[j] = temp;
            }
        }
    }
}

void searchPassengersByDestination(Passenger passengers[], int count, char destination[]) {
    int found = 0;
    for (int i = 0; i < count; i++) {
        if (strcmp(passengers[i].destination, destination) == 0) {
            printf("%s\n", passengers[i].name);
            found = 1;
        }
    }
    if (!found) {
        printf("No passengers traveling to %s\n", destination);
    }
}

int main() {
    Passenger passengers[MAX_PASSENGERS];
    int count = 0;
    int n;

    printf("Enter number of passengers: ");
    scanf("%d", &n);
    getchar(); // consume newline character

    for (int i = 0; i < n; i++) {
        char name[50];
        int age;
        char destination[50];

        printf("Passenger %d Name: ", i + 1);
        fgets(name, sizeof(name), stdin);
        name[strcspn(name, "\n")] = 0; // remove newline character

        printf("Passenger %d Age: ", i + 1);
        scanf("%d", &age);
        getchar(); // consume newline character

        printf("Passenger %d Destination: ", i + 1);
        fgets(destination, sizeof(destination), stdin);
        destination[strcspn(destination, "\n")] = 0; // remove newline character

        addPassenger(passengers, &count, name, age, destination);
    }

    sortPassengersByDestination(passengers, count);

    printf("\nSorted List (by destination):\n");
    for (int i = 0; i < count; i++) {
        printf("%s\n%s\n", passengers[i].name, passengers[i].destination);
    }

    char searchDest[50];
    printf("Enter destination to search: ");
    fgets(searchDest, sizeof(searchDest), stdin);
    searchDest[strcspn(searchDest, "\n")] = 0; // remove newline character

    printf("Passengers traveling to %s:\n", searchDest);
    searchPassengersByDestination(passengers, count, searchDest);

    return 0;
}
